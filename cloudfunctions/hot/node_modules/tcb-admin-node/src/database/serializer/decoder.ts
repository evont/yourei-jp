// import { cloneDeep } from 'lodash-es'
import { getType, isObject, isArray, isDate } from 'utils/type'
import { CloudSDKError } from 'utils/error'
import { decodeInternalDataType } from './common'

// types
import { DB, AnyObject } from 'typings'

export class Decoder {

  private constructor() {

  }

  static decode(data: object | object[]): object {
    const decoder = new Decoder()
    return decoder.decodeData(data)
  }

  decodeData(data: AnyObject | AnyObject[]): AnyObject | AnyObject[] {
    switch (getType(data)) {
      case 'object': {
        return this.decodeObject(data)
      }
      case 'array': {
        return (data as AnyObject[]).map(value => {
          if (isObject(value)) {
            // try to parse as internal data type
            const decoded = decodeInternalDataType(value)
            if (decoded !== value) {
              return decoded
            }

            // continue decode
            return this.decodeObject(value)
          } else return value
        })
      }
      default: {
        return data
      }
    }
  }

  decodeObject(data: AnyObject): AnyObject {
    const ret: AnyObject = {...data}
    for (const key in ret) {
      const value = ret[key]
      const valueType = getType(value)
      switch (valueType) {
        case 'object': {
          // determine if it is internal data type, if not, decode the object itself recursively
          const decoded = decodeInternalDataType(value)
          if (decoded !== value) {
            ret[key] = decoded
          } else {
            ret[key] = this.decodeObject(ret[key])
          }
          break
        }
        case 'array': {
          const decoded = this.decodeData(value)
          if (decoded !== value) {
            ret[key] = decoded
          }
          break
        }
        default: {
          continue
        }
      }
    }
    return ret
  }

}
